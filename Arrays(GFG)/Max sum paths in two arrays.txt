int maxPathSum(int ar1[], int ar2[])
    {
        int i=0,j=0;
        int n = ar1.length,m = ar2.length;
        int res = 0,sum1=0,sum2=0;
        
        while(i<n && j<m)
        {   
            // Add elements of ar1[] to sum1
            if(ar1[i] < ar2[j])
            {
                sum1 += ar1[i++];
            }
            
            //Add elements of ar2[] to sum2
            else if(ar1[i] > ar2[j])
            {
                sum2 += ar2[j++];
            }
            
            // we reached a common point
            else
            {
                // Take the maximum of two sums and add to
                // result
                //Also add the common element of array, once
                res += Math.max(sum1, sum2) + ar1[i];
 
                // Update sum1 and sum2 for elements after this
                // intersection point
                sum1 = 0;
                  sum2 = 0;
 
                //update i and j to move to next element of each array
                i++;
                j++;
            }
        }
            
             // Add remaining elements of ar1[]
        while (i < n)
            sum1 += ar1[i++];
 
        // Add remaining elements of ar2[]
        while (j < m)
            sum2 += ar2[j++];
 
        // Add maximum of two sums of remaining elements
        res += Math.max(sum1, sum2);
 
        return res;
        
    }

